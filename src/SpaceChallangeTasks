PART 1: The design
1-Create an Item class that includes a String name and an int weight that will represent an item to be carried by the rockets
2-Create a SpaceShip Interface that includes the definitions of these methods:
    launch: a method that returns either true or false indicating if the launch was successful or if the rocket has crashed.
    land: a method that also returns either true or false based on the success of the landing.
    canCarry: a method that takes an Item as an argument and returns true if the rocket can carry such item or false if it will exceed the weight limit.
    carry: a method that also takes an Item object and updates the current weight of the rocket.

3-Create a class Rocket that implements the SpaceShip Interface and hence implements all the methods above.
    launch and land methods in the Rocket class should always return true. When U1 and U2 classes extend the Rocket class they will override these methods to return true or false based on the actual probability of each type.
    carry and canCarry should be implemented here and will not need to be overridden in the U1 and U2 classes
4-Create classes U1 and U2 that extend the Rocket class and override the land and launch methods to calculate the corresponding chance of exploding and return either true or false based on a random number using the probability equation for each.

PART 2: The simulation
1-Create a Simulation class that is responsible for reading item data and filling up the rockets. The Simulation class should include these methods:

loadItems: this method loads all items from a text file and returns an ArrayList of Items:
Each line in the text file consists of the item name followed by = then its weigh in kg. For example:
habitat=100000
colony=50000
food=50000
loadItems should read the text file line by line and create an Item object for each and then add it to an ArrayList of Items. The method should then return that ArrayList.
loadU1: this method takes the ArrayList of Items returned from loadItems and starts creating U1 rockets. It first tries to fill up 1 rocket with as many items as possible before creating a new rocket object and filling that one until all items are loaded. The method then returns the ArrayList of those U1 rockets that are fully loaded.
loadU2: this method also takes the ArrayList of Items and starts creating U2 rockets and filling them with those items the same way as with U1 until all items are loaded. The method then returns the ArrayList of those U2 rockets that are fully loaded.

PART 3: Running the Simulation
1-2Create a Main class with the main method and start running the simulation:
2-Create a Simulation object
3-Load Items for Phase-1 and Phase-2
4-Display the results of the methods.